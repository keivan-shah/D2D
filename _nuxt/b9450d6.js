(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{301:function(t,e,n){"use strict";n.r(e);var r={asyncData:function(){return{}}},o=n(64),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("b-row",{staticClass:"justify-content-md-center mt-2"},[n("h1",[t._v("Demo P2P Chat")])]),t._v(" "),n("b-row",{staticClass:"mt-2"},[n("b-button",{attrs:{block:"",variant:"outline-primary",to:"/demo/host"}},[t._v("Host")])],1),t._v(" "),n("b-row",{staticClass:"mt-4"},[n("b-button",{attrs:{block:"",variant:"outline-primary",to:"/demo/client"}},[t._v("Client")])],1),t._v(" "),n("b-row",{staticClass:"mt-4"},[t._v("\n    This is just a P2P chat demo based off the PeerJS "),n("a",{attrs:{href:"https://github.com/jmcker/Peer-to-Peer-Cue-System"}},[t._v("Example")]),t._v("\n    This is NOT encrypted, just that it's P2P and uses the peerjs default servers for session metadata and candidate signaling. First\n    create a 'host', copy it's ID and then create a 'client', paste the host ID as receiverID and then you should be connected. Try\n    sending messages to each other!\n  ")])],1)}),[],!1,null,null,null);e.default=component.exports}}]);